link -> https://docs.google.com/document/d/1AWywcUIMoGr_cjOMaqjqeSyAyzK93icQE4W-6bDELfQ

3. Casino Royale

The first 10 people to write “7ee799112d95dbbedcd8e0d85959e08a6852773265edcaa83e858bb67d9ece55636825dd7e03d7738347f169edf0ae3179a6e1be63ad423ecbd60a9b50e7db60” in chat will get +1 score.

A remote server uses insecure RNGs for generating numbers for the lottery. Outsmart it by reverse engineering its inner state. The API consists of 2 methods:
Create account: GET /createacc?id={playerId}. Creates an account with a deposit of 1000 coins. Returns json in form:
{
    	"id":"2",
    	"money":1000,
    	"deletionTime":"2017-10-26T23:30:54.4759175Z"
}
 
Make a bet and play: GET /play{Mode}?id={playerID}&bet={amountOfMoney}&number={theNumberYouBetOn}. Returns json like this:
{
    	"message":"You lost this time",
    	"account":{
           	"id":"2",
           	"money":999,
           	"deletionTime":"2017-10-26T23:30:54.4759175Z"
    	},
    	"realNumber":34689329
}
 
Many real social casinos and games use similar insecure methods to generate results. Please be aware, this stuff is for you to practice and to remember how not to implement your own solutions, but NOT to use your knowledge to do harm. Doing this on real applications without proper permission can be viewed as breaking the law. You’ve been warned.
 
Single account may be used for different game modes. You create account at
http://95.217.177.249/casino/createacc
and play at
http://95.217.177.249/casino/play{Mode} where {Mode} is either of these: Lcg, Mt, BetterMt.
 
Generators give int32 numbers. All bets are 1000:1. You win, if your account has more than 1 000 000 money. All generators are seeded just before the first usage. They are never reseeded.
 
Everyone “knows” how to do something. You will learn much more if you actually do it.
 

1.  Linear congruential generator. {Mode} in link is “Lcg”. Numbers are generated like this:
public int Next()
{
	_last = (a * _last + c) % m; // m is 2^32
	return (int) _last;
}
The first one who writes “a” and “c” values to group chat will get +1 scores.
Lesson to learn: just never use LCG for anything.
 
2.   	Mersenne Twister 19937. {Mode} in link is “Mt”. Numbers are generated by the standard MT19937 algorithm. Seed is “DateTimeOffset.UtcNow.ToUnixTimeSeconds()”. From the 32 bit RNG output discover the seed. Use it to win.
Lesson to learn: hard algorithm is not always secure algorithm. Never seed your RNG with time or any other easily guessable numbers. It will make strong algorithm weak.

3.   	MT19937 with a strong seed. {Mode} in link is “BetterMt”. Seed is created with “System.Security.Cryptography.RandomNumberGenerator.Create()”.You need to extract the whole state of every register of MT to break this one. Create a new MT19937 generator, tap it for 624 outputs, untemper each of them to recreate the state of the generator, and splice that state into a new instance of the MT19937 generator. Use it to predict next values
Lesson to learn: Weak algorithm turns strong seed into garbage. The security of a system is made up not by the sum of parts but by the min.

Upload all your results to public github repo.

This task will be graded based on source code provided and demonstration.
